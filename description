This project was created as part of my 3rd sem Data Structures project.
Although going through README will be enough.
Here is the project description - 

It has play, pause, next, previous buttons to do the corresponding functions. It has a list which shows all the songs which has been imported to the music player. It has a favourites list and a button to add to favourites so that any song can be added from the main list to the favourites list. A progress bar also has been implemented which will show the progress of the completion of the song in percentage.
The songs have been imported and have been stored in a double linked list by their names and their extension. I have imported an external class (Javazoom Jlayer) which consists of functions to play and stop a running mp3 file. The buttons for pause, next and previous all use functions creates in the CustomPlayer.java file. The main function is in the client.java which creates an object for the makeui.java class. The makeui.java class creates the UI, which contains buttons, and action listeners for every button. These action listeners send an object of subclass Listen as parameter which is then checked for the source in the class Listen. According to their source, different functions have been called if certain conditions are satisfied. For example, play function will be executed only if any song is not playing. There are many more test cases like this. There is a search button which takes the text from the textfield and then highlights that song in the list if it is present. There is a list from which you can select and press play. You can also add to favourites from the list. From the favourites, play all button can be pressed to play the songs again and again repeating the list(Circular Queue).

Now I will explain some of the Java inbuilt properties used.
Swing has been used to create the UI. Software like NetBeans has not used to create the UI. From the Swing library, the classes JButton, JTextField, JList, JProgressBar have been prominently used.
Threading has been used to execute statements which should run in the background and shouldnâ€™t take place in the UI or stop any other ongoing executions. For example, a new thread is used to know the song left to be played (getavailable() function being called), this is being called until a flag variable in the main tread changes. This flag will change when pause button is pressed, when the song is being played. This thread lets me know the song left, and on playing back the same song again it will start from the same point rather than starting back again from the starting.
addActionListener function calling the class Listen which implements ActionListener. This function helps me execute certain statements depending upon the source of the button being pressed. 
actionPerformed is executed in the class Listen whenever a button is pressed. It has a parameter e of type ActionEvent which helps me get the source which is the JButton (and other swing class) object created in the outer class (makeui.java).
addWindowListener is used get a confirmation from the user when the close window button is pressed to close the music player.

Now I will explain some of the data structures and algorithm used.
Double Linked List has been used to store the name of the song which is being played (linkedList.java). Each node consists of a String and the previous and next node address. Search button calls the search function in the linkedList class. The search function performs a linear search of the string in the list which ignores the case and the file name extension .mp3.This search function returns a string which is the filename in the list. A Circular Queue has been used for the favourites list which has a button to play all in the list. The elements in the circular queue array is inserted when a song on the main list is selected and the button Add to Fav is pressed. The songs in this circular queue will play one after another and at the end it will again start from the first when the button play all is pressed.
